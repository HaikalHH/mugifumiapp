generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") 
  directUrl = env("DIRECT_DATABASE_URL")
}

// Application users and roles
model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  name         String
  role         String   // Admin | Manager | Sales | Bandung | Jakarta
  passwordHash String
  baseSalary   Int      @default(0)
  workStartMinutes Int  @default(540)  // 09:00 local
  workEndMinutes   Int  @default(1020) // 17:00 local
  overtimeHourlyRate Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  attendances       Attendance[]
  overtimeRequests  OvertimeRequest[]
}

model Attendance {
  id         Int      @id @default(autoincrement())
  userId     Int
  date       DateTime // Jakarta local date anchored at 00:00 UTC
  clockInAt  DateTime
  clockOutAt DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId, date])
}

model OvertimeRequest {
  id           Int      @id @default(autoincrement())
  userId       Int
  startAt      DateTime
  endAt        DateTime
  status       String   @default("PENDING") // PENDING | APPROVED | REJECTED
  approvedById Int?
  approvedAt   DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId, startAt])
}

model Product {
  id            Int             @id @default(autoincrement())
  code          String          @unique
  name          String
  price         Int
  hppPct        Float
  hppValue      Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  inventory     Inventory[]
  sales         SaleItem[]
  orderItems    OrderItem[]
  deliveryItems DeliveryItem[]
}

model Inventory {
  id        Int      @id @default(autoincrement())
  barcode   String   @unique
  location  String
  productId Int
  createdAt DateTime @default(now())
  status    String   @default("READY")
  product   Product  @relation(fields: [productId], references: [id])
}

model Sale {
  id             Int        @id @default(autoincrement())
  outlet         String
  customer       String?
  status         String     @default("ordered")
  orderDate      DateTime
  shipDate       DateTime?
  estPayout      Int?
  actPayout      Int?
  location       String
  discount       Float?
  actualReceived Int?
  createdAt      DateTime   @default(now())
  items          SaleItem[]
}

model SaleItem {
  id        Int     @id @default(autoincrement())
  saleId    Int
  productId Int
  barcode   String
  price     Int
  status    String?
  product   Product @relation(fields: [productId], references: [id])
  sale      Sale    @relation(fields: [saleId], references: [id])
}

model Order {
  id             Int        @id @default(autoincrement())
  outlet         String
  customer       String?
  status         String     @default("PAID")
  orderDate      DateTime
  location       String
  discount       Float?
  totalAmount    Int?
  actPayout      Int?
  createdAt      DateTime   @default(now())
  items          OrderItem[]
  deliveries     Delivery[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Int
  product   Product @relation(fields: [productId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id])
}

model Delivery {
  id          Int           @id @default(autoincrement())
  orderId     Int
  deliveryDate DateTime?
  status      String        @default("pending") // pending, delivered
  ongkirPlan  Int?          // Ongkir (Plan) in Rupiah
  ongkirActual Int?         // Ongkir (Actual) in Rupiah
  createdAt   DateTime      @default(now())
  items       DeliveryItem[]
  order       Order         @relation(fields: [orderId], references: [id])
}

model DeliveryItem {
  id          Int       @id @default(autoincrement())
  deliveryId  Int
  productId   Int
  barcode     String
  price       Int
  product     Product   @relation(fields: [productId], references: [id])
  delivery    Delivery  @relation(fields: [deliveryId], references: [id])
}

enum FinanceCategory {
  BAHAN
  PAYROLL
  BUILDING
  OPERASIONAL
  TRANSPORT
  PERLENGKAPAN
  MARKETING
}

model FinanceWeek {
  id        Int             @id @default(autoincrement())
  name      String
  month     Int
  year      Int
  startDate DateTime
  endDate   DateTime
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  periods   FinancePeriod[]
}

model FinancePeriod {
  id        Int                 @id @default(autoincrement())
  name      String
  month     Int
  year      Int
  startDate DateTime
  endDate   DateTime
  weekId    Int?
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  plans     FinancePlanEntry[]
  actuals   FinanceActualEntry[]

  week      FinanceWeek?        @relation(fields: [weekId], references: [id], onDelete: SetNull)

  @@index([weekId])
}

model FinancePlanEntry {
  id        Int             @id @default(autoincrement())
  periodId  Int
  category  FinanceCategory
  amount    Int
  data      Json?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  period    FinancePeriod   @relation(fields: [periodId], references: [id], onDelete: Cascade)

  @@index([periodId, category])
}

model FinanceActualEntry {
  id        Int             @id @default(autoincrement())
  periodId  Int
  category  FinanceCategory
  amount    Int
  data      Json?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  period    FinancePeriod   @relation(fields: [periodId], references: [id], onDelete: Cascade)

  @@index([periodId, category])
}
